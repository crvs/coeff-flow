#include <vector>
#include <fstream>

#pragma once

using std::vector;
using std::to_string;


void make_ply(std::ofstream& outfile,               //
              const vector<vector<double>>& points,  //
              const vector<vector<size_t>>& faces,  //
              const vector<vector<size_t>>& edges //
              ) {
    // make the header
    outfile << "ply\n";
    outfile << "format ascii 1.0\n";
    outfile << "comment author: automatically generated by make_ply\n";

    outfile << "element vertex " + to_string(points.size()) + "\n";
    outfile << "property float x\n";
    outfile << "property float y\n";
    outfile << "property float z\n";

    outfile << "element face " + to_string(faces.size()) + "\n";
    outfile << "property list uchar int vertex_index\n";

    outfile << "element edge " + to_string(edges.size()) + "\n";
    outfile << "property int vertex1\n";
    outfile << "property int vertex2\n";

    outfile << "end_header\n";

    // insert point list
    for (size_t i = 0; i < points.size() ; i++) {
        for (auto c : points[i]) outfile << to_string(c) + " ";
        if (points[i].size() < 3) {
        for (int t = 0;t<3-points[i].size();++t)
        outfile << "0.0 ";}
        outfile << "\n";
    }
    // insert face list
    for (size_t i = 0; i < faces.size(); ++i) {
        outfile << "3 ";
        // face vertex index
        for (size_t j : faces[i]) outfile << to_string(j) + " ";
        outfile << "\n";
    }
    // insert edge list
    for (size_t i = 0; i < edges.size(); ++i) {
        // edge vertex index
        for (size_t j : edges[i]) outfile << to_string(j) + " ";
        outfile << "\n";
    }
}

void make_ply(std::ofstream& outfile,               //
              const vector<vector<double>>& points,  //
              const vector<vector<size_t>>& faces,  //
              const vector<vector<int>>& face_colors,
              const vector<vector<size_t>>& edges, //
              const vector<vector<int>>& edge_colors //
              ) {
    // make the header
    outfile << "ply\n";
    outfile << "format ascii 1.0\n";
    outfile << "comment author: automatically generated by make_ply\n";

    outfile << "element vertex " + to_string(points.size()) + "\n";
    outfile << "property float x\n";
    outfile << "property float y\n";
    outfile << "property float z\n";
    outfile << "property uchar red\n";
    outfile << "property uchar green\n";
    outfile << "property uchar blue\n";

    outfile << "element face " + to_string(faces.size()) + "\n";
    outfile << "property list uchar int vertex_index\n";
    outfile << "property uchar red\n";
    outfile << "property uchar green\n";
    outfile << "property uchar blue\n";

    outfile << "element edge " + to_string(edges.size()) + "\n";
    outfile << "property int vertex1\n";
    outfile << "property int vertex2\n";
    outfile << "property uchar red\n";
    outfile << "property uchar green\n";
    outfile << "property uchar blue\n";

    outfile << "end_header\n";

    vector<vector<int>> v_colors(points.size(),{150,150,150});
    for(size_t i = 0; i < edges.size() ; i++)
    {
        size_t v1 = edges[i][0];
        size_t v2 = edges[i][1];
        v_colors[v1] = edge_colors[i];
        v_colors[v2] = edge_colors[i];
    }
    // insert point list
    for (size_t i = 0; i < points.size() ; i++) {
        for (auto c : points[i]) outfile << to_string(c) + " ";
        if (points[i].size() < 3) {
        for (int t = 0;t<3-points[i].size();++t)
        outfile << "0.0 ";}
        for (int k : v_colors[i]) outfile << to_string(k) + " ";
        outfile << "\n";
    }
    // insert face list
    for (size_t i = 0; i < faces.size(); ++i) {
        outfile << "3 ";
        // face vertex index
        for (size_t j : faces[i]) outfile << to_string(j) + " ";
        // face color
        for (int k : face_colors[i]) outfile << to_string(k) + " ";
        outfile << "\n";
    }
    // insert edge list
    for (size_t i = 0; i < edges.size(); ++i) {
        // edge vertex index
        for (size_t j : edges[i]) outfile << to_string(j) + " ";
        // edge color
        for (int k : edge_colors[i]) outfile << to_string(k) + " ";
        outfile << "\n";
    }
}

void make_ply(std::ofstream& outfile,               //
              const vector<vector<double>>& points,  //
              const vector<vector<size_t>>& faces  //
              ) {
    vector<vector<size_t>> edges;
    make_ply(outfile,points,faces,edges);
}
